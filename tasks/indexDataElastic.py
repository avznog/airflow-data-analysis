import pandas as pd
from elasticsearch import Elasticsearch, TransportError
def indexDataElastic(ti):
  
  	# Define the mapping
		# df = pd.DataFrame({'code_departements': {0: '1', 1: '10', 2: '11', 3: '12', 4: '13', 5: '14', 6: '21', 7: '24', 8: '25', 9: '27', 10: '28', 11: '29', 12: '33', 13: '35', 14: '36', 15: '40', 16: '41', 17: '44', 18: '45', 19: '56', 20: '57', 21: '58', 22: '59', 23: '60', 24: '62', 25: '63', 26: '64', 27: '65', 28: '67', 29: '68', 30: '69', 31: '71', 32: '72', 33: '73', 34: '77', 35: '78', 36: '79', 37: '81', 38: '82', 39: '83', 40: '84', 41: '92', 42: '94', 43: '95', 44: '07', 45: '15', 46: '18', 47: '23', 48: '31', 49: '32', 50: '34', 51: '37', 52: '38', 53: '39', 54: '42', 55: '43', 56: '47', 57: '52', 58: '53', 59: '66', 60: '70', 61: '74', 62: '85', 63: '86', 64: '91'}, 'gazole_prix': {0: 1.655, 1: 1.6785, 2: 1.649, 3: 1.639, 4: 1.619, 5: 1.6615, 6: 1.664, 7: 1.662, 8: 1.6853333333333333, 9: 1.6564999999999999, 10: 1.647, 11: 1.633, 12: 1.659, 13: 1.648, 14: 1.6713, 15: 1.651, 16: 1.659, 17: 1.7073333333333334, 18: 1.659, 19: 1.6840000000000002, 20: 1.675, 21: 1.719, 22: 1.639, 23: 1.667, 24: 1.639, 25: 1.669, 26: 1.6600000000000001, 27: 1.653, 28: 1.6771, 29: 1.689, 30: 1.699, 31: 1.6556666666666668, 32: 1.639, 33: 1.672, 34: 1.54, 35: 1.7300000000000002, 36: 1.615, 37: 1.649, 38: 1.611, 39: 1.6665, 40: 1.649, 41: 1.689, 42: 1.789, 43: 1.679, 44: 0.0, 45: 0.0, 46: 0.0, 47: 0.0, 48: 0.0, 49: 0.0, 50: 0.0, 51: 0.0, 52: 0.0, 53: 0.0, 54: 0.0, 55: 0.0, 56: 0.0, 57: 0.0, 58: 0.0, 59: 0.0, 60: 0.0, 61: 0.0, 62: 0.0, 63: 0.0, 64: 0.0}, 'sp95_prix': {0: 1.858, 1: 1.876, 2: 1.839, 3: 1.8289999999999997, 4: 1.85, 5: 1.8765, 6: 1.88, 7: 1.864, 8: 1.854, 9: 1.874, 10: 1.846, 11: 1.825, 12: 1.847, 13: 1.847, 14: 1.8752, 15: 1.858, 16: 1.875, 17: 1.888, 18: 1.839, 19: 1.8639999999999999, 20: 1.829, 21: 1.929, 22: 1.779, 23: 1.859, 24: 1.849, 25: 1.889, 26: 1.8623333333333332, 27: 1.898, 28: 1.8562999999999998, 29: 1.839, 30: 1.8940000000000001, 31: 1.8323333333333334, 32: 1.859, 33: 1.865, 34: 1.90575, 35: 1.8536666666666666, 36: 1.82, 37: 1.849, 38: 1.797, 39: 1.855, 40: 1.859, 41: 1.919, 42: 1.949, 43: 1.879, 44: 0.0, 45: 0.0, 46: 0.0, 47: 0.0, 48: 0.0, 49: 0.0, 50: 0.0, 51: 0.0, 52: 0.0, 53: 0.0, 54: 0.0, 55: 0.0, 56: 0.0, 57: 0.0, 58: 0.0, 59: 0.0, 60: 0.0, 61: 0.0, 62: 0.0, 63: 0.0, 64: 0.0}, 'e10_prix': {0: 1.779, 1: 1.8375, 2: 1.809, 3: 1.779, 4: 1.81, 5: 1.829, 6: 1.821, 7: 1.853, 8: 1.8103333333333333, 9: 1.8375, 10: 1.804, 11: 1.783, 12: 1.799, 13: 1.7985, 14: 1.8272, 15: 1.802, 16: 1.823, 17: 1.8626666666666667, 18: 1.819, 19: 1.837, 20: 1.779, 21: 1.899, 22: 1.819, 23: 1.8355000000000001, 24: 1.809, 25: 1.859, 26: 1.8356666666666666, 27: 1.838, 28: 1.8074999999999999, 29: 1.795, 30: 1.8639999999999999, 31: 1.7990000000000002, 32: 1.8039999999999998, 33: 1.826, 34: 1.867, 35: 1.8786666666666667, 36: 1.795, 37: 1.779, 38: 1.749, 39: 1.8165, 40: 1.799, 41: 1.869, 42: 1.919, 43: 1.819, 44: 0.0, 45: 0.0, 46: 0.0, 47: 0.0, 48: 0.0, 49: 0.0, 50: 0.0, 51: 0.0, 52: 0.0, 53: 0.0, 54: 0.0, 55: 0.0, 56: 0.0, 57: 0.0, 58: 0.0, 59: 0.0, 60: 0.0, 61: 0.0, 62: 0.0, 63: 0.0, 64: 0.0}, 'sp98_prix': {0: 1.876, 1: 1.9035, 2: 1.899, 3: 1.8790000000000002, 4: 1.87, 5: 1.902, 6: 1.891, 7: 1.912, 8: 1.8860000000000001, 9: 1.884, 10: 1.871, 11: 1.856, 12: 1.879, 13: 1.887, 14: 1.9058, 15: 1.913, 16: 1.899, 17: 1.9193333333333333, 18: 1.869, 19: 1.929, 20: 1.885, 21: 1.949, 22: 1.889, 23: 1.9140000000000001, 24: 1.889, 25: 1.929, 26: 1.8883333333333334, 27: 1.918, 28: 1.8959, 29: 1.895, 30: 1.924, 31: 1.8663333333333334, 32: 1.904, 33: 1.899, 34: 1.947, 35: 1.9646666666666668, 36: 1.86, 37: 1.879, 38: 1.848, 39: 1.8820000000000001, 40: 1.919, 41: 1.959, 42: 1.979, 43: 1.899, 44: 0.0, 45: 0.0, 46: 0.0, 47: 0.0, 48: 0.0, 49: 0.0, 50: 0.0, 51: 0.0, 52: 0.0, 53: 0.0, 54: 0.0, 55: 0.0, 56: 0.0, 57: 0.0, 58: 0.0, 59: 0.0, 60: 0.0, 61: 0.0, 62: 0.0, 63: 0.0, 64: 0.0}, 'consot': {0: 0.0, 1: 0.0, 2: 0.0, 3: 6307.642, 4: 130447.575, 5: 107212.19499999999, 6: 32291.17, 7: 7785.02, 8: 13084.741999999998, 9: 0.0, 10: 0.0, 11: 347532.005, 12: 37803.36, 13: 19563.39, 14: 3028.93, 15: 11751.899999999998, 16: 5324.53, 17: 29343.26, 18: 15697.06, 19: 17768.62, 20: 14985.87, 21: 0.0, 22: 535950.025, 23: 90899.40333333332, 24: 0.0, 25: 0.0, 26: 12106.45, 27: 0.0, 28: 593624.615, 29: 22307.079999999998, 30: 54546.695, 31: 33260.83000000001, 32: 151108.14, 33: 21506.12, 34: 234211.795, 35: 0.0, 36: 0.0, 37: 101149.05, 38: 0.0, 39: 51064.455, 40: 99846.48, 41: 0.0, 42: 0.0, 43: 22210.04, 44: 1988.5, 45: 6144.915, 46: 17833.62, 47: 14429.585, 48: 6071.36, 49: 17895.645, 50: 58934.479999999996, 51: 512095.12, 52: 106289.42499999999, 53: 17860.39, 54: 6342.360000000001, 55: 5806.92, 56: 3788.68, 57: 6569.19, 58: 12789.48, 59: 8848.9, 60: 3191.94, 61: 24890.235, 62: 46414.795, 63: 175357.44, 64: 143681.87}, 'consor': {0: 0.0, 1: 0.0, 2: 0.0, 3: 35085.666, 4: 347997.18, 5: 255869.81, 6: 114669.46, 7: 69146.57, 8: 56036.683999999994, 9: 0.0, 10: 0.0, 11: 635864.415, 12: 116302.755, 13: 88481.965, 14: 24235.15, 15: 42737.255, 16: 39763.57, 17: 163190.90500000003, 18: 9040.0, 19: 97739.01, 20: 178055.55, 21: 0.0, 22: 1366733.4449999998, 23: 166005.81333333332, 24: 0.0, 25: 0.0, 26: 57700.89, 27: 0.0, 28: 724608.57, 29: 78314.81, 30: 147682.3, 31: 57375.84, 32: 163837.31, 33: 45048.72, 34: 331341.7225, 35: 0.0, 36: 0.0, 37: 265726.505, 38: 0.0, 39: 151480.45, 40: 348405.43, 41: 0.0, 42: 0.0, 43: 152757.21000000002, 44: 18317.42, 45: 38241.82, 46: 57311.655, 47: 47204.524999999994, 48: 88167.63, 49: 52908.795, 50: 183994.555, 51: 1001113.215, 52: 323987.72, 53: 59584.47, 54: 58436.51, 55: 30718.9, 56: 24635.93, 57: 28177.82, 58: 63475.43, 59: 35893.59, 60: 33707.91, 61: 80808.475, 62: 119490.09, 63: 478877.18999999994, 64: 417186.12}, 'consoi': {0: 0.0, 1: 0.0, 2: 0.0, 3: 4099.736, 4: 150226.31, 5: 47829.245, 6: 67362.07, 7: 25706.46, 8: 16913.192000000003, 9: 0.0, 10: 0.0, 11: 420706.00499999995, 12: 78263.56499999999, 13: 36505.315, 14: 3150.02, 15: 76308.80500000001, 16: 37849.0, 17: 20201.865, 18: 15315.0, 19: 84978.9, 20: 49883.52, 21: 0.0, 22: 6306965.495, 23: 140108.8533333333, 24: 0.0, 25: 0.0, 26: 14042.12, 27: 0.0, 28: 726458.9975, 29: 55020.465, 30: 32514.475, 31: 9137.869999999999, 32: 171701.38, 33: 235917.75, 34: 993848.5025, 35: 0.0, 36: 0.0, 37: 212574.62999999998, 38: 0.0, 39: 12211.505000000001, 40: 237494.85, 41: 0.0, 42: 0.0, 43: 5386.65, 44: 411.58, 45: 7646.840000000001, 46: 25594.030000000002, 47: 11604.52, 48: 1197.09, 49: 10479.365, 50: 27846.29, 51: 383258.03500000003, 52: 221073.635, 53: 13913.16, 54: 24759.22, 55: 4720.929999999999, 56: 2244.84, 57: 6965.39, 58: 44966.59, 59: 26100.8, 60: 12805.805, 61: 25124.747499999998, 62: 62058.945, 63: 366708.44, 64: 45949.34}})
		df = pd.DataFrame(ti.xcom_pull(key="joined_df", task_ids="join_datasets"))
		mapping = {
				"properties": {
						"code_departements": {"type": "integer"},  # Change the mapping type to "text"
						"gazole_prix": {"type": "float"},
						"sp95_prix": {"type": "float"},
						"sp98_prix": {"type": "float"},
						"e10_prix": {"type": "float"},
						"consoi": {"type": "float"},
						"consor": {"type": "float"},
						"consot": {"type": "float"},
				}
		}

		# Connexion à Elasticsearch
		# Password for the 'elastic' user generated by Elasticsearch
		ELASTIC_PASSWORD = "22cLkzs4rn1OIMU7LqCZzahQ"
		# # Found in the 'Manage Deployment' page
		CLOUD_ID = "fe8da02c947645afad26db448035c26f:dXMtY2VudHJhbDEuZ2NwLmNsb3VkLmVzLmlvOjQ0MyQyMmU5ZTc4MGNlZDM0ZjAyYTJmZDQ2NzRlM2Y1N2NjYyQ4ZDkyOTg5M2JmODc0MTcxYjFlZTU3NmM1OWViYzQyZg=="
		# # Create the client instance
		with Elasticsearch(
				cloud_id=CLOUD_ID,
				basic_auth=("elastic", ELASTIC_PASSWORD)
		) as es:
			
			
			# # Nom de l'index Elasticsearch
			index_name = 'bigdata2'
			try:
					# Delete the index if it already exists
					if es.indices.exists(index=index_name):
							es.indices.delete(index=index_name)
							print(f"Deleted existing index: {index_name}")
					# Create the index with the new mapping
					es.indices.create(index=index_name, body={"mappings": mapping})
					print(f"Created index: {index_name}")
			except TransportError as e:
					print(f"Failed to connect to Elasticsearch: {e}")
					raise e
			except Exception as e:
					print(f"Failed to load data to Elasticsearch: {e}")
					raise e
			# Parcours des lignes du DataFrame
			for _, row in df.iterrows():
					# Conversion de la ligne en dict pour l'importation dans Elasticsearch
					document = row.to_dict()
					try:
					# Index the document
							es.index(index=index_name, body=document)
							print(f"Indexed document: {document} -> done")
					except:
							print(f"Failed to index document: {document}")
							print(f"Error message: {e}")
							raise e
			# Fermeture de la connexion à Elasticsearch
			# es.close()
	
# indexDataElastic()